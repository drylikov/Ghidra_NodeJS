@define SIZE "4"

#constant pool
@define CP_CONSTANTS 		"0"
@define CP_INTRINSICTYPE 	"1"
@define CP_RUNTIMETYPE 		"2"
@define CP_CONTEXTTYPE 		"3"
@define CP_LITERALTYPE 		"4"
@define CP_SMI 		"5"
# receiver type
@define RECV_UNDEF 	"0"
@define RECV_ARG	"1"
@define RECV_PAIR	"2"
# condition for throw
@define TC_THEHOLE 			"1"
@define TC_NOTTHEHOLE		"2"
@define TC_UNCONDITIONAL	"0"
# call type
@define INTRINSICTYPE	"1"
@define RUNTIMETYPE 	"2"
@define PROPERTYTYPE 	"3"

define endian=little;
define alignment=1;

define space ram type=ram_space size=$(SIZE) wordsize=1 default;
define space register type=register_space size=$(SIZE);

define register offset=0x14000 size=4             # arguments
[
	a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 
	a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 
	a33 a34 a35 a36 a37 a38 a39 a40 a41 a42 a43 a44 a45 a46 a47 a48 
	a49 a50 a51 a52 a53 a54 a55 a56 a57 a58 a59 a60 a61 a62 a63 a64 
	a65 a66 a67 a68 a69 a70 a71 a72 a73 a74 a75 a76 a77 a78 a79 a80 
	a81 a82 a83 a84 a85 a86 a87 a88 a89 a90 a91 a92 a93 a94 a95 a96 
	a97 a98 a99 a100 a101 a102 a103 a104 a105 a106 a107 a108 a109 a110 a111 a112 
	a113 a114 a115 a116 a117 a118 a119 a120 a121 a122 a123 a124 a125
];

define register offset=0x3000 size=4             # registers
[
	r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 
	r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 
	r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 
	r49 r50 r51 r52 r53 r54 r55 r56 r57 r58 r59 r60 r61 r62 r63 r64 
	r65 r66 r67 r68 r69 r70 r71 r72 r73 r74 r75 r76 r77 r78 r79 r80 
	r81 r82 r83 r84 r85 r86 r87 r88 r89 r90 r91 r92 r93 r94 r95 r96 
	r97 r98 r99 r100 r101 r102 r103 r104 r105 r106 r107 r108 r109 r110 r111 r112 
	r113 r114 r115 r116 r117 r118 r119 r120 r121 r122 r123 
];

define register offset=0x2020 size=$(SIZE) [ True False Undefined TheHole Null JSReceiver ];
define register offset=0x2000 size=$(SIZE) [ pc fb _context _closure ];
# range_size - special internal register for dealing with multiple stores/loads 
define register offset=0x0080 size=$(SIZE) [ range_size acc sp];

define token opcode(8)
	op = (0,7)
	wide = (0,7)
;
# context registers for ranges
define register offset=0x00 size=8   contextreg;
define context contextreg
	counter = (0,7)
	offStart = (8,16) signed
;

define token operand(8)
	kImm = (0,7) signed dec
	kIdx = (0,7)
	kIdx_2 = (0,7)
	kUImm = (0,7)
	kFlag8 = (0,7)
	kIntrinsicId = (0,7)
	kReg = (0,7)
;

define token wr_operand(16)
	kRuntimeId = (0,15)
;

attach variables [ kReg ] [
	_ _ a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16
	a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 
	a33 a34 a35 a36 a37 a38 a39 a40 a41 a42 a43 a44 a45 a46 a47 a48 
	a49 a50 a51 a52 a53 a54 a55 a56 a57 a58 a59 a60 a61 a62 a63 a64 
	a65 a66 a67 a68 a69 a70 a71 a72 a73 a74 a75 a76 a77 a78 a79 a80 
	a81 a82 a83 a84 a85 a86 a87 a88 a89 a90 a91 a92 a93 a94 a95 a96 
	a97 a98 a99 a100 a101 a102 a103 a104 a105 a106 a107 a108 a109 a110 a111 a112 
	a113 a114 a115 a116 a117 a118 a119 a120 a121 a122 a123 a124 a125	
	r123 r122 r121 r120 r119 r118 r117 r116 r115 r114 
	r113 r112 r111 r110 r109 r108 r107 r106 r105 r104 r103 r102 r101 r100 r99 r98 
	r97 r96 r95 r94 r93 r92 r91 r90 r89 r88 r87 r86 r85 r84 r83 r82 	
	r81 r80 r79 r78 r77 r76 r75 r74 r73 r72 r71 r70 r69 r68 r67 r66 	
	r65 r64 r63 r62 r61 r60 r59 r58 r57 r56 r55 r54 r53 r52 r51 r50 	
	r49 r48 r47 r46 r45 r44 r43 r42 r41 r40 r39 r38 r37 r36 r35 r34 	
	r33 r32 r31 r30 r29 r28 r27 r26 r25 r24 r23 r22 r21 r20 r19 r18 	
	r17 r16 r15 r14 r13 r12 r11 r10 r9 r8 r7 r6 r5 r4 r3 r2 r1 r0 _ _ _closure _context
];


@include "ranges.sinc"

define pcodeop JSCallNCallOther;
define pcodeop CallVariadicCallOther;
define pcodeop CheckOSRLevel;
define pcodeop ThrowCallOther;
define pcodeop StaDataPropertyInLiteralCallOther;
define pcodeop LdaNamedProperty;
define pcodeop LdaKeyedProperty;
define pcodeop StackCheck;
define pcodeop InvokeIntrinsicCallOther;
define pcodeop CallRuntimeCallOther;
define pcodeop ConstructCallOther;
define pcodeop Construct;
define pcodeop CallJSRuntimeCallOther;
define pcodeop GetTypeStr;
define pcodeop ToBoolean;
define pcodeop TestEqual;
define pcodeop TestEqualStrict;
define pcodeop GetGlobal;
define pcodeop SetGlobalValue;
define pcodeop StaNamedProperty;
define pcodeop StaKeyedProperty;
define pcodeop GetSuperConstructor;
define pcodeop InstanceOf;
define pcodeop HasProperty;
define pcodeop TestUndetectable;
define pcodeop TypeOf;
define pcodeop ToName;
define pcodeop CreateArrayLiteral;
define pcodeop CreateObjectLiteral;
define pcodeop CreateEmptyObjectLiteral;
define pcodeop CreateClosure;
define pcodeop CreateBlockContext;
define pcodeop CreateCatchContext;
define pcodeop CreateFunctionContext;
define pcodeop SetPendingMessage;
define pcodeop RestoreGeneratorRegisters;
define pcodeop StoreGeneratorRegisters;
define pcodeop StoreGeneratorSuspend_id;
define pcodeop StoreGeneratorCurrentOffset;
define pcodeop StoreGeneratorContext;
define pcodeop SetGeneratorExecuting;
define pcodeop GetGeneratorState;
define pcodeop SuspendGenerator;
define pcodeop SwitchOnSmiNoFeedback;
define pcodeop CallRuntimeForPair;
define pcodeop CallJSRuntime;
define pcodeop GetJSRuntime;
define pcodeop GetConstant;
define pcodeop GetNamedProperty;
define pcodeop GetKeyedProperty;

# unimplemented, described in stub mode:
define pcodeop LdaGlobalInsideTypeof;
define pcodeop LdaLookupSlot;
define pcodeop LdaLookupContextSlot;
define pcodeop LdaLookupGlobalSlot;
define pcodeop LdaLookupSlotInsideTypeof;
define pcodeop LdaLookupContextSlotInsideTypeof;
define pcodeop LdaLookupGlobalSlotInsideTypeof;
define pcodeop StaLookupSlot;
define pcodeop LdaModuleVariable;
define pcodeop StaModuleVariable;
define pcodeop CollectTypeProfile;
define pcodeop DeletePropertyStrict;
define pcodeop DeletePropertySloppy;
define pcodeop ConstructWithSpread;
define pcodeop ToNumber;
define pcodeop ToObject;
define pcodeop CreateRegExpLiteral;
define pcodeop CreateEvalContext;
define pcodeop CreateWithContext;
define pcodeop CreateMappedArguments;
define pcodeop CreateUnmappedArguments;
define pcodeop CreateRestParameter;
define pcodeop ForInPrepare;
define pcodeop ForInContinue;
define pcodeop ForInNext;
define pcodeop ForInStep;
define pcodeop Debugger;
define pcodeop DebugBreak;
define pcodeop DebugBreakWide;
define pcodeop DebugBreakExtraWide;
define pcodeop IncBlockCounter;
define pcodeop Illegal;

# destination for jumps
dest: rel is kUImm [ rel = inst_start + kUImm; ] {
  export *[ram]:4 rel;
}
# destination for JumpLoop
destloop: rel is kUImm [ rel = inst_start - kUImm; ] {
  export *[ram]:4 rel;
}

# second part in rangeDst, view ranges.sinc
rangeSrc: {  is kReg; kUImm  [ offStart = kReg; counter =  kUImm; ] { range_size = kUImm;  export kReg;}
pair: {  is kReg  [offStart = kReg; counter = 2; ] { range_size = 2 ; export kReg; }
triple: {   is kReg  [offStart = kReg; counter = 3; ] { range_size = 3; export kReg; }

src: kReg is kReg {export kReg;}
dst: kReg is kReg {export kReg;}
object: kReg is kReg {export kReg;}
key: kReg is kReg {export kReg;}
spcontext: kReg is kReg {export kReg;}
name: kReg is kReg {export kReg;}
callable: kReg is kReg {export kReg;}
receiver: kReg is kReg {export kReg;}
arg1: kReg is kReg {export kReg;}
arg2: kReg is kReg {export kReg;}
arg3: kReg is kReg {export kReg;}
arg4: kReg is kReg {export kReg;}
constructor: kReg is kReg {export kReg;}
exception: kReg is kReg {export kReg;}
index: kReg is kReg {export kReg;}
cache_length: kReg is kReg {export kReg;}


:LdaZero is op = 0x2 {
	acc = 0;
}
:LdaSmi [kImm] is op = 0x3; kImm {
	acc = kImm;
}
:LdaUndefined is op = 0x4  {
	acc = Undefined;
}
:LdaNull is op = 0x5  {
	acc = Null;
}
:LdaTheHole is op = 0x6 {
	acc = TheHole;
}
:LdaTrue is op = 0x7 {
	acc = True;
}
:LdaFalse is op = 0x8 {
	acc = False;
}
:LdaConstant [kIdx] is op = 0x9; kIdx {
	cp:8 = cpool(0,inst_start,kIdx, $(CP_CONSTANTS));
	acc = GetConstant(cp);
}

:LdaGlobal [kIdx], [kIdx_2] is op = 0xa; kIdx; kIdx_2 {
	cp:4 = cpool(0,inst_start, kIdx, $(CP_CONSTANTS));
	acc = GetGlobal(cp);
}
:LdaGlobalInsideTypeof [kIdx], [kIdx_2] is op = 0xb; kIdx; kIdx_2 {
	acc = LdaGlobalInsideTypeof(kIdx:4);
}
:StaGlobalSloppy [kIdx], [kIdx_2] is op = 0xc; kIdx; kIdx_2 {
	cp:4 = cpool(0,inst_start, kIdx, $(CP_CONSTANTS));
	SetGlobalValue(cp, acc);
}
:StaGlobalStrict [kIdx], [kIdx_2] is op = 0xd; kIdx; kIdx_2 {
	cp:4 = cpool(0,inst_start, kIdx, $(CP_CONSTANTS));
	SetGlobalValue(cp, acc);
}
:PushContext spcontext is op = 0xe; spcontext {
	spcontext = _context;
	_context = acc;
}
:PopContext spcontext is op = 0xf; spcontext  {
	_context = spcontext;
}

:LdaContextSlot spcontext, [kIdx], [kUImm] is op = 0x10; spcontext; kIdx; kUImm {
	acc = cpool(0,inst_start, kIdx, $(CP_CONTEXTTYPE));
}

:LdaImmutableContextSlot spcontext, [kIdx], [kUImm] is op = 0x11; spcontext; kIdx; kUImm {
	acc = cpool(0,inst_start, kIdx, $(CP_CONTEXTTYPE));
}
:LdaCurrentContextSlot [kIdx] is op = 0x12; kIdx {
	acc = cpool(0,inst_start, kIdx, $(CP_CONTEXTTYPE));
}
:LdaImmutableCurrentContextSlot [kIdx] is op = 0x13; kIdx {
	acc = cpool(0,inst_start, kIdx, $(CP_CONTEXTTYPE));
}

:StaContextSlot spcontext, [kIdx], [kUImm] is op = 0x14; spcontext; kIdx; kUImm {
	cp:4 = cpool(0,inst_start, kIdx, $(CP_CONTEXTTYPE));
	*:4 cp = acc;
}
:StaCurrentContextSlot [kIdx] is op = 0x15; kIdx {
	cp:4 = cpool(0,inst_start, kIdx, $(CP_CONTEXTTYPE));
	*:4 cp = acc;
}
# LdaLookupSlot <name_index>
# Lookup the object with the name in constant pool entry |name_index| dynamically
# CallRuntime via Runtime::kLoadLookupSlot
:LdaLookupSlot [kIdx] is op = 0x16; kIdx {
	acc = LdaLookupSlot(kIdx:4);
}
# LdaLookupSlot <name_index>
# 
#  Lookup the object with the name in constant pool entry |name_index|  dynamically.
:LdaLookupContextSlot [kIdx], [kIdx_2], [kUImm] is op = 0x17; kIdx; kIdx_2; kUImm {
	acc = LdaLookupContextSlot(kIdx:4, kIdx_2:4, kUImm:4);
}
# LdaLookupGlobalSlot <name_index> <feedback_slot> <depth>
#
# Lookup the object with the name in constant pool entry |name_index| dynamically.
:LdaLookupGlobalSlot [kIdx], [kIdx_2], [kUImm] is op = 0x18; kIdx; kIdx_2; kUImm {
	acc = LdaLookupGlobalSlot(kIdx:4, kIdx_2:4, kUImm:4);
}
# LdaLookupSlotInsideTypeof <name_index>
:LdaLookupSlotInsideTypeof [kIdx] is op = 0x19; kIdx {
	acc = LdaLookupSlotInsideTypeof(kIdx:4);
}
:LdaLookupContextSlotInsideTypeof [kIdx], [kIdx_2], [kUImm] is op = 0x1a; kIdx; kIdx_2; kUImm {
	acc = LdaLookupContextSlotInsideTypeof(kIdx:4, kIdx_2:4, kUImm:4);
}
# LdaLookupGlobalSlotInsideTypeof <name_index> <feedback_slot> <depth>
# 
#  Lookup the object with the name in constant pool entry |name_index|
#  dynamically without causing a NoReferenceError.
:LdaLookupGlobalSlotInsideTypeof [kIdx], [kIdx_2], [kUImm] is op = 0x1b; kIdx; kIdx_2; kUImm {
	acc = LdaLookupGlobalSlotInsideTypeof(kIdx:4, kIdx_2:4, kUImm:4);
}
:StaLookupSlot [kIdx], kFlag8 is op = 0x1c; kIdx; kFlag8 {
	StaLookupSlot(acc, kIdx:4, kFlag8:4);
}
:Ldar src is op = 0x1d; src {
	acc = src;
}
:Star dst is op = 0x1e; dst {
	dst = acc;
}
:Mov src, dst is op = 0x1f; src; dst {
	dst = src;
}
:LdaNamedProperty object, [kIdx], [kIdx_2] is op = 0x20; object; kIdx; kIdx_2 {
	cp:4 = cpool(0,inst_start, kIdx, $(CP_CONSTANTS));
	acc = LdaNamedProperty(object, cp);
}
:LdaKeyedProperty object, [kIdx] is op = 0x21; object; kIdx {
	acc = LdaKeyedProperty(_context, object, acc);
}
# LdaModuleVariable <cell_index> <depth>
:LdaModuleVariable [kImm], [kUImm] is op = 0x22; kImm; kUImm {
	acc = LdaModuleVariable(kImm:4, kUImm:4);
}
:StaModuleVariable [kImm], [kUImm] is op = 0x23; kImm; kUImm {
	StaModuleVariable(acc, kImm:4, kUImm:4);
}
:StaNamedPropertySloppy object, [kIdx], [kIdx_2] is op = 0x24; object; kIdx; kIdx_2 {
	cp:4 = cpool(0,inst_start,kIdx, $(CP_CONSTANTS));
	val:4 = GetNamedProperty(object, cp);
	StaNamedProperty(_context, val, acc, 0:4);
}
:StaNamedPropertyStrict object, [kIdx], [kIdx_2] is op = 0x25; object; kIdx; kIdx_2 {
 	cp:4 = cpool(0,inst_start,kIdx, $(CP_CONSTANTS));
 	val:4 = GetNamedProperty(object, cp);
	StaNamedProperty(_context, val, acc, 1:4);
}
:StaNamedOwnProperty object, [kIdx], [kIdx_2] is op = 0x26; object; kIdx; kIdx_2 {
	cp:4 = cpool(0,inst_start,kIdx, $(CP_CONSTANTS));
	val:4 = GetNamedProperty(object, cp);
	StaNamedProperty(_context, val, acc, 2:4);
}
:StaKeyedPropertySloppy object, key, [kIdx] is op = 0x27; object; key; kIdx {
	val:4 = GetKeyedProperty(object, key);
	StaKeyedProperty(_context, val, acc, 0:4);
}
:StaKeyedPropertyStrict object, key, [kIdx] is op = 0x28; object; key; kIdx {
	val:4 = GetKeyedProperty(object, key);
	StaKeyedProperty(_context, val, acc, 1:4);
}
:StaDataPropertyInLiteral object, name, kFlag8, [kIdx] is op = 0x29; object; name; kFlag8; kIdx {
	StaDataPropertyInLiteralCallOther();
}
:CollectTypeProfile [kImm] is op = 0x2a; kImm {
	CollectTypeProfile(kImm:4, acc);
}
:Add src, [kIdx] is op = 0x2b; src; kIdx {
	acc = src + acc;
}
:Sub src, [kIdx] is op = 0x2c; src; kIdx {
	acc = src - acc;
}
:Mul src, [kIdx] is op = 0x2d; src; kIdx {
	acc = src * acc;
}
:Div src, [kIdx] is op = 0x2e; src; kIdx {
	acc = src / acc;
}
:Mod src, [kIdx] is op = 0x2f; src; kIdx {
	acc = src % acc;
}
:BitwiseOr src, [kIdx] is op = 0x30; src; kIdx {
	acc = src | acc;
}
:BitwiseXor src, [kIdx] is op = 0x31; src; kIdx  {
	acc = src ^ acc;
}
:BitwiseAnd src, [kIdx] is op = 0x32; src; kIdx  {
	acc = src & acc;
}
:ShiftLeft src, [kIdx] is op = 0x33; src; kIdx  {
	acc = src << (acc & 0x1F);
}
:ShiftRight src, [kIdx] is op = 0x34; src; kIdx {
	acc = src s>> (acc & 0x1F);
}
:ShiftRightLogical src, [kIdx] is op = 0x35; src; kIdx  {
	acc = src >> (acc & 0x1F);
}
:AddSmi [kImm], [kIdx] is op = 0x36; kImm; kIdx {
	acc = acc + kImm;
}
:SubSmi [kImm], [kIdx] is op = 0x37; kImm; kIdx {
	acc = acc - kImm;
}
:MulSmi [kImm], [kIdx] is op = 0x38; kImm; kIdx {
	acc = acc * kImm;
}
:DivSmi [kImm], [kIdx] is op = 0x39; kImm; kIdx {
	acc = acc / kImm;
}
:ModSmi [kImm], [kIdx] is op = 0x3a; kImm; kIdx {
	acc = acc % kImm;
}
:BitwiseOrSmi [kImm], [kIdx] is op = 0x3b; kImm; kIdx {
	acc = acc | kImm;
}
:BitwiseXorSmi [kImm], [kIdx] is op = 0x3c; kImm; kIdx {
	acc = acc ^ kImm;
}
:BitwiseAndSmi [kImm], [kIdx] is op = 0x3d; kImm; kIdx {
	acc = acc & kImm;
}
:ShiftLeftSmi [kImm], [kIdx] is op = 0x3e; kImm; kIdx {
	acc = acc << (kImm & 0x1F);
}
:ShiftRightSmi [kImm], [kIdx] is op = 0x3f; kImm; kIdx {
	acc = acc s>> (kImm & 0x1F);
}
:ShiftRightLogicalSmi [kImm], [kIdx] is op = 0x40; kImm; kIdx {
	acc = acc >> (kImm & 0x1F);
}
:Inc [kIdx] is op = 0x41; kIdx {
	acc = acc + 1;
}
:Dec [kIdx] is op = 0x42; kIdx {
	acc = acc - 1;
}
:ToBooleanLogicalNot is op = 0x43 {
	acc= ~(ToBoolean(acc));
}
:LogicalNot is op = 0x44 {
	acc= ~(acc);
}
:TypeOf is op = 0x45 {
	acc = TypeOf(acc);
}
:DeletePropertyStrict object is op = 0x46; object {
	acc = DeletePropertyStrict(object);
}
:DeletePropertySloppy object is op = 0x47; object {
	acc = DeletePropertySloppy(object);
}
:GetSuperConstructor object is op = 0x48; object {
	object = GetSuperConstructor(acc, _context);
}
:CallAnyReceiver callable, rangeSrc^rangeDst, [kIdx] is op = 0x49; callable; rangeSrc; rangeDst; kIdx {
	CallVariadicCallOther($(PROPERTYTYPE):4, $(RECV_ARG):4);
}
:CallProperty callable, rangeSrc^rangeDst, [kIdx] is op = 0x4a; callable; rangeSrc; rangeDst; kIdx {
	CallVariadicCallOther($(PROPERTYTYPE):4, $(RECV_ARG):4);
}
:CallProperty0 callable, receiver, [kIdx] is op = 0x4b; callable; receiver; kIdx {
	JSCallNCallOther(0:4, $(RECV_ARG):4);
}
:CallProperty1 callable, receiver, arg1, [kIdx] is op = 0x4c; callable; receiver; arg1; kIdx {
	JSCallNCallOther(1:4, $(RECV_ARG):4);
}
:CallProperty2 callable, receiver, arg1, arg2, [kIdx] is op = 0x4d; callable; receiver; arg1; arg2; kIdx {
	JSCallNCallOther(2:4, $(RECV_ARG):4);
}
:CallUndefinedReceiver callable, rangeSrc^rangeDst, [kIdx] is op = 0x4e; callable; rangeSrc; rangeDst; kIdx {
	CallVariadicCallOther($(PROPERTYTYPE):4, $(RECV_UNDEF):4);
}
:CallUndefinedReceiver0 callable, [kIdx] is op = 0x4f; callable; kIdx {
	JSCallNCallOther(0:4, $(RECV_UNDEF):4);
}
:CallUndefinedReceiver1 callable, arg1, [kIdx] is op = 0x50; callable; arg1; kIdx {
	JSCallNCallOther(1:4, $(RECV_UNDEF):4);
}
:CallUndefinedReceiver2 callable, arg1, arg2, [kIdx] is op = 0x51; callable; arg1; arg2; kIdx {
	JSCallNCallOther(2:4, $(RECV_UNDEF):4);
}
:CallWithSpread callable, rangeSrc^rangeDst, [kIdx] is op = 0x52; callable; rangeSrc; rangeDst; kIdx {
	#The final argument is always a spread.
	CallVariadicCallOther($(PROPERTYTYPE):4, $(RECV_ARG):4);
}
:CallRuntime [kRuntimeId], rangeSrc^rangeDst is op = 0x53; kRuntimeId; rangeSrc; rangeDst {
	CallRuntimeCallOther($(RUNTIMETYPE):4, $(RECV_UNDEF):4);
}
:CallRuntimeForPair kRuntimeId, rangeSrc^rangeDst, pair^rangeDstStub is op = 0x54; kRuntimeId; rangeSrc; rangeDst; pair; rangeDstStub {
	CallRuntimeForPair(kRuntimeId:4, rangeSrc, range_size, pair);
}
:CallJSRuntime [kIdx], rangeSrc^rangeDst is op = 0x55; kIdx; rangeSrc; rangeDst {
	acc = GetJSRuntime(kIdx:4);
	CallJSRuntimeCallOther();
}
:InvokeIntrinsic [kIntrinsicId], rangeSrc^rangeDst is op = 0x56; kIntrinsicId; rangeSrc; rangeDst {
	InvokeIntrinsicCallOther($(INTRINSICTYPE):4, $(RECV_UNDEF):4);
}
:Construct constructor, rangeSrc^rangeDst, [kIdx] is op = 0x57; constructor; rangeSrc; rangeDst; kIdx {
	ConstructCallOther();
}
:ConstructWithSpread constructor, rangeSrc^rangeDst, [kIdx] is op = 0x58; constructor; rangeSrc; rangeDst; kIdx {
	acc = ConstructWithSpread(constructor:4, rangeSrc:4, range_size);
}
:TestEqual src, [kIdx] is op = 0x59; src; kIdx {
	if (src == acc) goto <true>;
	acc =False;
	goto inst_next;
	<true>
	acc=True;
}
:TestEqualStrict src, [kIdx] is op = 0x5a; src; kIdx {
	acc = TestEqualStrict(acc,src);
}
:TestLessThan src, [kIdx] is op = 0x5b; src; kIdx {
	if (src s< acc) goto <true>;
	acc =False;
	goto inst_next;
	<true>
	acc=True;
}
:TestGreaterThan src, [kIdx] is op = 0x5c; src; kIdx {
	if (src s> acc) goto <true>;
	acc =False;
	goto inst_next;
	<true>
	acc=True;
}
:TestLessThanOrEqual src, [kIdx] is op = 0x5d; src; kIdx {
	if (src s<= acc) goto <true>;
	acc =False;
	goto inst_next;
	<true>
	acc=True;
}
:TestGreaterThanOrEqual src, [kIdx] is op = 0x5e; src; kIdx {
	if (src s>= acc) goto <true>;
	acc =False;
	goto inst_next;
	<true>
	acc=True;
}
:TestEqualStrictNoFeedback src is op = 0x5f; src {
	# no feedback
	acc = TestEqualStrict(acc,src);
}
:TestInstanceOf src is op = 0x60; src {
	acc = InstanceOf(src, acc, _context);
}
:TestIn src is op = 0x61; src {
	acc = HasProperty(src, acc, _context,0:4);
}
:TestUndetectable is op = 0x62 {
	acc = TestUndetectable(acc);
}
:TestNull is op = 0x63 {
	acc = TestEqualStrict(acc,Null);
}
:TestUndefined is op = 0x64 {
	acc = TestEqualStrict(acc,Undefined);
}
:TestTypeOf kFlag8 is op = 0x65; kFlag8 {
	tp:4 = TypeOf(acc);
	lit:4 = cpool(0,inst_start,kFlag8, $(CP_LITERALTYPE));
	if (tp == lit) goto <true>;
	acc =False;
	goto inst_next;
	<true>
	acc=True;
}
:ToName dst is op = 0x66; dst {
	dst = ToName(acc, _context);
}
:ToNumber dst, [kIdx] is op = 0x67; dst; kIdx {
	dst = ToNumber(acc);
}
:ToObject dst is op = 0x68; dst {
	dst = ToObject(acc);
}
:CreateRegExpLiteral [kIdx], [kIdx_2], kFlag8 is op = 0x69; kIdx; kIdx_2; kFlag8 {
	acc = CreateRegExpLiteral(kIdx:4, kIdx_2:4, kFlag8:4);
}
:CreateArrayLiteral [kIdx], [kIdx_2], kFlag8 is op = 0x6a; kIdx; kIdx_2; kFlag8 {
	literal_index:4 = kIdx_2;
	acc = CreateArrayLiteral(_context, _closure, literal_index, kIdx:4, kFlag8:4);
}
:CreateEmptyArrayLiteral [kIdx] is op = 0x6b; kIdx {
	literal_index:4 = kIdx;
	acc = CreateObjectLiteral(_context, _closure, literal_index);
}
:CreateObjectLiteral [kIdx], [kIdx_2], kFlag8, dst is op = 0x6c; kIdx; kIdx_2; kFlag8; dst {
	literal_index:4 = kIdx_2;
	cp:4 = cpool(0,inst_start,kIdx, $(CP_CONSTANTS));
	dst = CreateObjectLiteral(_context, _closure, cp, literal_index, kFlag8:4);
}
:CreateEmptyObjectLiteral is op = 0x6d {
	acc = CreateEmptyObjectLiteral(_context);
}
:CreateClosure [kIdx], [kIdx_2], kFlag8 is op = 0x6e; kIdx; kIdx_2; kFlag8 {
	cp:4 = cpool(0,inst_start, kIdx, $(CP_CONSTANTS));
	acc = CreateClosure(_context, cp, kIdx_2:4, kFlag8:4);
}
:CreateBlockContext [kIdx] is op = 0x6f; kIdx {
	cp:4 = cpool(0,inst_start,kIdx, $(CP_CONSTANTS));
	acc = CreateBlockContext(_context, _closure, cp);
}
:CreateCatchContext exception, [kIdx], [kIdx_2] is op = 0x70; exception; kIdx; kIdx_2 {
	closure:4 = acc;
	ex:4 = cpool(0,inst_start,kIdx_2, $(CP_CONSTANTS));
	cp:4 = cpool(0,inst_start,kIdx, $(CP_CONSTANTS));
	acc = CreateCatchContext(_context, closure, exception, cp, ex);
}
:CreateFunctionContext [kUImm] is op = 0x71; kUImm {
	acc = CreateFunctionContext(_context, _closure, kUImm:4);
}
:CreateEvalContext [kUImm] is op = 0x72; kUImm {
	acc = CreateEvalContext(kUImm:4);
}
:CreateWithContext object, [kIdx] is op = 0x73; object; kIdx {
	acc = CreateWithContext(acc, object, kIdx:4);
}
:CreateMappedArguments is op = 0x74 {
	acc = CreateMappedArguments();
}
:CreateUnmappedArguments is op = 0x75 {
	acc = CreateUnmappedArguments();
}
:CreateRestParameter is op = 0x76 {
	acc = CreateRestParameter();
}
:JumpLoop [destloop], [kImm] is op = 0x77; destloop; kImm {
	CheckOSRLevel(kImm:4);
	goto destloop;
}
:Jump [dest] is op = 0x78; dest {
	goto dest;
}
:JumpConstant [kIdx] is op = 0x79; kIdx {
	tmp:4 = cpool(0, inst_start,kIdx, $(CP_SMI)); 
	addr:4 =  inst_start + tmp;
	goto [addr];
}
:JumpIfNullConstant [kIdx] is op = 0x7a; kIdx {
	if (acc != Null) goto inst_next;
	tmp:4 = cpool(0, inst_start,kIdx, $(CP_SMI)); 
	addr:4 = inst_start + tmp;
	goto [addr];
}
:JumpIfNotNullConstant [kIdx] is op = 0x7b; kIdx {
	if (acc == Null) goto inst_next;
	tmp:4 = cpool(0, inst_start,kIdx, $(CP_SMI)); 
	addr:4 = inst_start + tmp;
	goto [addr];
}
:JumpIfUndefinedConstant [kIdx] is op = 0x7c; kIdx {
	if (acc != Undefined)  goto inst_next;
	tmp:4 = cpool(0, inst_start,kIdx, $(CP_SMI)); 
	addr:4 = inst_start + tmp;
	goto [addr];
}
:JumpIfNotUndefinedConstant [kIdx] is op = 0x7d; kIdx {
	if (acc == Undefined) goto inst_next;
	tmp:4 = cpool(0, inst_start,kIdx, $(CP_SMI)); 
	addr:4 = inst_start + tmp;
	goto [addr];
}
:JumpIfTrueConstant [kIdx] is op = 0x7e; kIdx {
	if (acc != True) goto inst_next;
	tmp:4 = cpool(0, inst_start,kIdx, $(CP_SMI)); 
	addr:4 = inst_start + tmp;
	goto [addr];
}
:JumpIfFalseConstant [kIdx] is op = 0x7f; kIdx {
	if (acc != False) goto inst_next;
	tmp:4 = cpool(0, inst_start,kIdx, $(CP_SMI)); 
	addr:4 = inst_start + tmp;
	goto [addr];
}
:JumpIfJSReceiverConstant [kIdx] is op = 0x80; kIdx {
	if (acc != JSReceiver) goto inst_next;
	tmp:4 = cpool(0, inst_start,kIdx, $(CP_SMI)); 
	addr:4 = inst_start + tmp;
	goto [addr];
}
:JumpIfToBooleanTrueConstant [kIdx] is op = 0x81; kIdx {
	if (ToBoolean(acc) != True) goto inst_next;
	tmp:4 = cpool(0, inst_start,kIdx, $(CP_SMI)); 
	addr:4 = inst_start + tmp;
	goto [addr];
}
:JumpIfToBooleanFalseConstant [kIdx] is op = 0x82; kIdx {
	if (ToBoolean(acc) != False) goto inst_next;
	tmp:4 = cpool(0, inst_start,kIdx, $(CP_SMI)); 
	addr:4 = inst_start + tmp;
	goto [addr];
}
:JumpIfToBooleanTrue [dest] is op = 0x83; dest {
	if ( ToBoolean(acc) == True) goto dest;
}
:JumpIfToBooleanFalse [dest] is op = 0x84; dest {
	if ( ToBoolean(acc) == False) goto dest;
}
:JumpIfTrue [dest] is op = 0x85; dest {
	if (acc == True) goto dest;
}
:JumpIfFalse [dest] is op = 0x86; dest {
	if (acc == False) goto dest;
}
:JumpIfNull [dest] is op = 0x87; dest {
	if (acc == Null) goto dest;
}
:JumpIfNotNull [dest] is op = 0x88; dest {
	if (acc != Null) goto dest;
}
:JumpIfUndefined [dest] is op = 0x89; dest {
	if (acc == Undefined) goto dest;
}
:JumpIfNotUndefined [dest] is op = 0x8a; dest {
	if (acc != Undefined) goto dest;
}

:JumpIfJSReceiver dest is op = 0x8b; dest {
	if (acc == JSReceiver) goto dest;
}
:SwitchOnSmiNoFeedback [kIdx], [kUImm], [kImm] is op = 0x8c; kIdx; kUImm; kImm {
  SwitchOnSmiNoFeedback(cpool(0:4, inst_start,0, 0:4));
}

:ForInPrepare receiver, triple^rangeDst is op = 0x8d; receiver; triple; rangeDst {
	ForInPrepare(receiver, triple, 3:4);
}
:ForInContinue index, cache_length is op = 0x8e; index; cache_length {
	acc = ForInContinue(index, cache_length);
}
:ForInNext receiver, index, pair^rangeDst, [kIdx] is op = 0x8f; receiver; index; pair; rangeDst; kIdx {
	acc = ForInNext(receiver, index, pair, 2:4);
}
:ForInStep index is op = 0x90; index {
	acc = ForInStep(index);
}
:StackCheck is op = 0x91 {
	StackCheck();
}
:SetPendingMessage is op = 0x92 {
	acc = SetPendingMessage(acc);
}
:Throw is op = 0x93 {
	ThrowCallOther($(TC_UNCONDITIONAL):4, 238:4);
}
:ReThrow is op = 0x94 {
	ThrowCallOther($(TC_UNCONDITIONAL):4, 235:4);
}
:Return is op = 0x95 {
	return [acc];
}
:ThrowReferenceErrorIfHole [kIdx] is op = 0x96; kIdx {
	ThrowCallOther($(TC_NOTTHEHOLE):4, 257:4);
}
:ThrowSuperNotCalledIfHole is op = 0x97 {
	ThrowCallOther($(TC_NOTTHEHOLE):4, 47:4);
}
:ThrowSuperAlreadyCalledIfNotHole is op = 0x98 {
	ThrowCallOther($(TC_THEHOLE):4, 46:4);
}
:RestoreGeneratorState src is op = 0x99; src {
	acc = GetGeneratorState(src);
	SetGeneratorExecuting(src);
}
:SuspendGenerator dst, rangeSrc^rangeDst, [kUImm] is op = 0x9a; dst; rangeSrc; rangeDst; kUImm {
	SuspendGenerator(dst, rangeSrc, range_size, _context, kUImm:4);
}
:RestoreGeneratorRegisters src, rangeSrc^rangeDst is op = 0x9b; src; rangeSrc; rangeDst {

	RestoreGeneratorRegisters(src, rangeSrc, range_size);
}
:Debugger is op = 0x9c {Debugger();}
:DebugBreak0 is op = 0x9d {DebugBreak();}
:DebugBreak1 arg1 is op = 0x9e; arg1 {DebugBreak(arg1);}
:DebugBreak2 arg1, arg2 is op = 0x9f; arg1; arg2 {DebugBreak(arg1, arg2);}
:DebugBreak3 arg1, arg2, arg3 is op = 0xa0; arg1; arg2; arg3 {DebugBreak(arg1, arg2, arg3);}
:DebugBreak4 arg1, arg2, arg3, arg4 is op = 0xa1; arg1; arg2; arg3; arg4 {DebugBreak( arg1, arg2, arg3, arg4);}
:DebugBreak5 kRuntimeId, arg1, arg2 is op = 0xa2; kRuntimeId; arg1; arg2 {DebugBreak(kRuntimeId:4, arg1, arg2);}
:DebugBreak6 kRuntimeId, arg1, arg2, arg3 is op = 0xa3; kRuntimeId; arg1; arg2; arg3 {DebugBreak(kRuntimeId:4, arg1, arg2, arg3);}
:DebugBreakWide is op = 0xa4 {DebugBreakWide();}
:DebugBreakExtraWide is op = 0xa5 {DebugBreakExtraWide();}
:IncBlockCounter [kIdx] is op = 0xa6; kIdx {
	IncBlockCounter(kIdx:4);
}
:Illegal is op = 0xa7 {Illegal();}
# was not presented in our version, only for switch purposes
:Nop is op = 0xa8 {}

@include "wide_instructions.sinc"
@include "extrawide_instructions.sinc"
