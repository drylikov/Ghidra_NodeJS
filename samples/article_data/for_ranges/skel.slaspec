define endian=little;
define alignment=1;

# $(SIZE) will be equal to 4
@define SIZE "4"
@define RECV_ARG	"1"
@define PROPERTYTYPE 	"3"
# define space spacename attributes

# type=(ram_space|rom_space|register_space)
# size=integer
# default – use this space unless another one was specified
# wordsize=integer

# ram definition
define space ram type=ram_space size=$(SIZE) wordsize=1 default;
# register space definition
define space register type=register_space size=$(SIZE);
# offset can be important for analyzer purposes, you don`t define different registers in the same address ranges at the same space

# function argument registers, mentioned in <input> tag in cspec
define register offset=0x14000 size=4             
[
	a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 
	a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 
	a33 a34 a35 a36 a37 a38 a39 a40 a41 a42 a43 a44 a45 a46 a47 a48 
	a49 a50 a51 a52 a53 a54 a55 a56 a57 a58 a59 a60 a61 a62 a63 a64 
	a65 a66 a67 a68 a69 a70 a71 a72 a73 a74 a75 a76 a77 a78 a79 a80 
	a81 a82 a83 a84 a85 a86 a87 a88 a89 a90 a91 a92 a93 a94 a95 a96 
	a97 a98 a99 a100 a101 a102 a103 a104 a105 a106 a107 a108 a109 a110 a111 a112 
	a113 a114 a115 a116 a117 a118 a119 a120 a121 a122 a123 a124 a125
];
define register offset=0x3000 size=4             
[
	r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 
	r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 
	r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 
	r49 r50 r51 r52 r53 r54 r55 r56 r57 r58 r59 r60 r61 r62 r63 r64 
	r65 r66 r67 r68 r69 r70 r71 r72 r73 r74 r75 r76 r77 r78 r79 r80 
	r81 r82 r83 r84 r85 r86 r87 r88 r89 r90 r91 r92 r93 r94 r95 r96 
	r97 r98 r99 r100 r101 r102 r103 r104 r105 r106 r107 r108 r109 r110 r111 r112 
	r113 r114 r115 r116 r117 r118 r119 r120 r121 r122 r123 
];

define register offset=0x0080 size=$(SIZE) [ range_size acc sp];
# 0x2000- 0x2fff was mentioned in <global> tag in cspec 
define register offset=0x2000 size=$(SIZE) [ pc fp _context _closure ];
define register offset=0x2020 size=$(SIZE) [ True False Undefined TheHole Null JSReceiver ];

# context register for ranges
define register offset=0x00 size=8   contextreg;
define context contextreg
	# counter for range registers enumerating
      counter = (0,7)
	# variable to store the first register
      offStart = (8,16) signed
;

define token opcode(8)
	op = (0,7)
;
define token operand(8)
	kImm = (0,7) signed dec
	kIdx = (0,7)
	kIdx_2 = (0,7)
	kUImm = (0,7) 
	kFlag8 = (0,7)
	kIntrinsicId = (0,7)
	kReg = (0,7)
	
;
# attach variables [ fields ] [ registers ]
attach variables [ kReg ] [
	_ _ a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16
	a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 
	a33 a34 a35 a36 a37 a38 a39 a40 a41 a42 a43 a44 a45 a46 a47 a48 
	a49 a50 a51 a52 a53 a54 a55 a56 a57 a58 a59 a60 a61 a62 a63 a64 
	a65 a66 a67 a68 a69 a70 a71 a72 a73 a74 a75 a76 a77 a78 a79 a80 
	a81 a82 a83 a84 a85 a86 a87 a88 a89 a90 a91 a92 a93 a94 a95 a96 
	a97 a98 a99 a100 a101 a102 a103 a104 a105 a106 a107 a108 a109 a110 a111 a112 
	a113 a114 a115 a116 a117 a118 a119 a120 a121 a122 a123 a124 a125	
	r123 r122 r121 r120 r119 r118 r117 r116 r115 r114 
	r113 r112 r111 r110 r109 r108 r107 r106 r105 r104 r103 r102 r101 r100 r99 r98 
	r97 r96 r95 r94 r93 r92 r91 r90 r89 r88 r87 r86 r85 r84 r83 r82 	
	r81 r80 r79 r78 r77 r76 r75 r74 r73 r72 r71 r70 r69 r68 r67 r66 	
	r65 r64 r63 r62 r61 r60 r59 r58 r57 r56 r55 r54 r53 r52 r51 r50 	
	r49 r48 r47 r46 r45 r44 r43 r42 r41 r40 r39 r38 r37 r36 r35 r34 	
	r33 r32 r31 r30 r29 r28 r27 r26 r25 r24 r23 r22 r21 r20 r19 r18 	
	r17 r16 r15 r14 r13 r12 r11 r10 r9 r8 r7 r6 r5 r4 r3 r2 r1 r0 pc fp _closure _context
];


rangeSrc: {  is kReg; kUImm  [ offStart = kReg; counter =  kUImm; ] { range_size = kUImm;  export kReg;} 
# and it`s not difficult to modify range into pair and triple, you should just hardcode counter to 2 or 3 in rangeSrc
@include "ranges.sinc"

src: kReg is kReg {  # src – table identifier                
    export kReg;     # dynamic export for manipulation in semantic section where this constructor will be used
}
dst: kReg is kReg {export kReg;}

# “op=0xa7” is a constraint dictating to interpret a byte as an instruction Illegal
:Illegal is op = 0xa7 unimpl  # decompilation will be interrupted

# was not presented in our version, only for switch purposes
:Nop is op = 0xa8 {} # empty decompiled code

#  LdaSmi <imm>
# 
#  Load an integer literal into the accumulator as a Smi.
#
:LdaSmi [kImm] is op = 0x3; kImm {
	acc = kImm;
}
#  AddSmi <imm>
#
#  Adds an immediate value <imm> to the value in the accumulator.
#   kIdx is needed for optimization purposes
:AddSmi [kImm], [kIdx] is op = 0x36; kImm; kIdx {
	acc = acc + kImm;
}


#:LdaSmi acc, [kImm] is op = 0x3; kImm; acc {
#	acc = kImm;
#}

:Return is op = 0x95 {
	return [acc];
}

#  Mul <src>
# 
#  Multiply accumulator by register <src>.
:Mul src, [kIdx] is op = 0x2d; src; kIdx {
	acc = acc * src;
} 



:Ldar src is op = 0x1d; src {
	acc = src;
}
:Star dst is op = 0x1e; dst {
	dst = acc;
} 
# inst_start – address of current instruction
# * - dereference operator

# Jump <imm>
# 
# Jump by the number of bytes represented by the immediate operand |imm|.
#:Jump [rel] is op = 0x78; kUImm [ rel = inst_start + kUImm; ]  {
## rel:4 for resolving variable size 
#	goto [rel:4]; 
#}
# calculate destination for jumps

# * - dereference operator
# inst_start – address of current instruction

dest: rel is kUImm [ rel = inst_start + kUImm; ] {
#  export *:4 rel;
  export *[ram]:4 rel;
} 
# Jump <imm>
# 
# Jump by the number of bytes represented by the immediate operand |imm|.
:Jump [dest] is op = 0x78; dest {
	goto dest;
}

#  JumpIfFalse <imm>
# 
#  Jump by the number of bytes represented by an immediate operand if the
#  accumulator contains false.
:JumpIfFalse [dest] is op = 0x86; dest {
	if (acc == False) goto dest;
}

#  TestGreaterThan <src>
# 
#  Test if the value in the <src> register is greater than the accumulator.
#  kIdx is needed for optimization purposes
:TestGreaterThan src, [kIdx] is op = 0x5c; src; kIdx {
	if (src s> acc) goto <true>;
	acc =False;
	goto inst_next;
	<true>
	acc=True;
}
callable: kReg is kReg {export kReg;}
receiver: kReg is kReg {export kReg;}
arg1: kReg is kReg {export kReg;}
arg2: kReg is kReg {export kReg;}

# Call <callable> <receiver> <arg_count> <feedback_slot_id>
#
# Call a JSfunction or Callable in |callable| with the |receiver| and
# |arg_count| arguments in subsequent registers. Collect type feedback
# into |feedback_slot_id|

:CallProperty2 callable, receiver, arg1, arg2, [kIdx] is op = 0x4d; callable; receiver; arg1; arg2; kIdx {
    # you can define locals as:
	local tmpArg1 = a0;
    # or “local tmpArg1:4 = a0;”
    # or in such manner:
	tmpArg2:4 = a1;
	a1 = arg1;
	a0 = arg2;
	call [callable];
	receiver = acc;	
	a0 = tmpArg1;
	a1 = tmpArg2;
}

macro push(x){
	sp = sp - $(SIZE);
	*:$(SIZE) sp = x;
}
macro pop(x){
	x = *:$(SIZE) sp;
	sp = sp + $(SIZE);
}
:CallUndefinedReceiver1 callable, arg1, [kIdx] is op = 0x50; callable; arg1; kIdx {
	push(a0);
	a0 = arg1;
	call [callable];
	pop(a0);
}
define pcodeop TypeOf;
define pcodeop StackCheck;
define pcodeop GetGlobal;

:TypeOf is op = 0x45 {
	acc = TypeOf(acc);
}
:StackCheck is op = 0x91 {
	StackCheck();
}
:LdaGlobal [kIdx], [kIdx_2] is op = 0xa; kIdx; kIdx_2 {
#     it will be discussed in next paper, now let`s work without resolving constants
#	cp:4 = cpool(0,inst_start, kIdx, $(CP_CONSTANTS));
#     temp expression:
	cp:4 = kIdx;
	acc = GetGlobal(cp);
}


#define pcodeop CallVariadicCallOther;

define pcodeop CallProperty;
# Call <callable> <receiver> <arg_count> <feedback_slot_id>
# 
# Call a JSfunction or Callable in |callable| with the |receiver| and
# |arg_count| arguments in subsequent registers. Collect type feedback
# into |feedback_slot_id|

:CallProperty callable, rangeSrc^rangeDst, [kIdx] is op = 0x4a; callable; rangeSrc; rangeDst; kIdx { 
	CallProperty(callable, rangeSrc, range_size, acc);
}



